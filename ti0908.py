# -*- coding: utf-8 -*-
"""TI0908.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qTecQaxMUoOph5ozmZEc1QcOom91oHS7
"""

carrinho = ["tomates", "batatas", "ovos", "pães", "brigadeiro"]
"papaya" in carrinho and "tomates" in carrinho

lista = []

"batatas" in carrinho

"peixe" in carrinho

"papaya" in carrinho and "tomates" in carrinho

[5, 10, 15, 20, 25, 30]

impares = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21]

impares[0:5]

impares[:3]

impares[3:]

impares[:]

impares[0:8:1]

impares[0:8:2]

impares[0:8:3]

impares[0:8:9999]

impares[::2]

impares

impares[-1]

impares[-2]

impares[-11]

impares[4:-3]

impares[8:0:-2]

exp2_6 = [2, 3, 7, 11, 13, 17]
print(exp2_6[::-1])

print("Tamanho do carrinho = " , len(carrinho) )

carrinho.count("batatas")

numeros = [1, 2, 3, 4, 5, 6, 7, 7, 8, 10, 11, 11, 11]
print("Ocorrências de 11 em nossa lista:", numeros.count(11))
print("Ocorrências de 7 em nossa lista:", numeros.count(7))

numeros = [ 49 , 12 , 37 , 28 , 78 , 21 , 81 , 68 , 31 , 79 , 54 ]
print("Maior numero da lista: ", max(numeros) )
print("Menor numero da lista: ", min(numeros) )

listaStrings = ["zeta", "Alpha"]
valorMaximo = max(listaStrings)
print(valorMaximo)

carrinho.append("toddy")
carrinho.append("açúcar")
carrinho.sort()
print("Carrinho: ", carrinho)

print("Estou removendo o item: ", carrinho.pop(3) )
print("Carrinho atualizado:" , carrinho )

print("Estou removendo o item: ", carrinho.pop() )
print("Carrinho atualizado:" , carrinho )

if "batatas" in carrinho:
  print("Estou removendo as batatas: ", carrinho.remove("batatas") )

print("Carrinho atualizado:" , carrinho )

numeros_copiados = numeros.copy()

lista_original = [1, 2, 3, 4, 5]
lista_copiada = lista_original
lista_copiada.append(6)
print("Lista original:", lista_original)
print("Lista copiada:", lista_copiada)

lista_original = [1, 2, 3, 4, 5]
lista_copiada = lista_original.copy()
lista_copiada.append(6)
print("Lista original:", lista_original)
print("Lista copiada:", lista_copiada)

print("Lista de numeros desordenada:" , numeros)
print("Lista de numeros ordenada:" , numeros_copiados )

carrinho.append("Sonic")
carrinho.sort()
print(carrinho)

carrinho = numeros
for uwu in numeros:
  print(f"{uwu} é meu amigo?!")

alunos = ["João", "Pedro", "Henrique", "Manoel", "Carlos", "Gabriel"]

alunos_aprovados = 0

for aluno in alunos:
  nota = float(input(f"Qual a nota de {aluno}? "))

  if nota >= 7:
    print(f"{aluno} passou!")
    alunos_aprovados += 1

  else:
    print(f"{aluno} está de final!")

  if alunos_aprovados == 1:
    passou = "passou"

  else:
    passou = "passaram"
  print(f"De {len(alunos)}, {alunos_aprovados} {passou} direto.")

dificuldade = int(input("Escolha a dificuldade (de 1 a 10): "))

# Verificando a dificuldade
if dificuldade > 10 or dificuldade < 1:
  quit()

# Definindo o número de tentativas
tentativas_possiveis = 11 - dificuldade

# palavra a ser descoberta
palavra_string = input("Qual a palavra a ser decifrada? ").strip().lower()

# Tratando a palavra:
palavra = []
for letra in palavra_string:
  palavra.append(letra)

palavra = list(set(palavra))

# Iniciando o jogo:
if palavra_string.isalpha(): # Verificando se a palavra não é proibida:
  print("Pode começar!")
  finalizado = False
else:
  print("Palavra proibida!")
  finalizado = True

# Iniciando o loop:
chutes = []
while not finalizado and tentativas_possiveis:
  chute = input("Chute uma letra: ").strip().lower()

# Verificando se o chute se encaixa nas especificações:
  if len(chute) > 1:
    print("Chute UMA LETRA!")
    continue

# Verificando se o chute é repetido:
  if chute in chutes:
    print("Chute repetido...")
    continue

# Adicionando o chute à lista de chutes:
  chutes.append(chute)
  chutes = list(set(chutes))

# Printando as letras descobertas:
  for letra in palavra_string:
    if letra in chutes:
      print(letra, end=' ')
    else:
      print('_', end=' ')
  print()
# Verificando se o usuário acertou o chute:
# Verificando se a lista de chutes tem todos os elementos da lista de palavras:
  falta_letra = False
  for letra in palavra:
    if letra not in chutes:
      falta_letra = True
  if falta_letra:
    if chute not in palavra:
      tentativas_possiveis -= 1
      print("Chute incorreto!")
      print(f"Você pode errar mais {tentativas_possiveis} vezes!")
    else:
      print("Chute correto, ainda faltam letras!")
  else:
    print("Você acertou!")
    finalizado = True
# finalizado significa que o problema foi resolvido:

if finalizado and palavra_string.isalpha():
  print(f'A palavra era "{palavra_string}".')

range(1, 5, 1)

range(1, 5)

range(1, 5) == range(1, 5, 1)

n = 5
range(0, n) == range(n)

list(range(1, 5))

list(range(0, 9, 2))

list(range(10, 0, -1))

N = int(input())
intervalo = list(range(0, N + 1, 2))
intervalo[1:]

N = int(input())

for i in range(0, N + 1, 2):
  if i != 0:
    print(f"{i} é par!")

lista = []
print("Digite uma sequência de 6 números para adicionar na lista")
for x in range(6):
  lista.append(input(f"{x+1}) "))
print(lista)

for i in range(25, -11, -1):
  print(i)

